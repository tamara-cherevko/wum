'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var _loaderUtils = require('loader-utils');

var _loaderUtils2 = _interopRequireDefault(_loaderUtils);

exports['default'] = function (content) {
    var _this = this;

    this.cacheable();

    var query = _loaderUtils2['default'].parseQuery(this.query);
    var _query$config = query.config;
    var configArr = _query$config === undefined ? [] : _query$config;

    var modules = _objectWithoutProperties(query, ['config']);

    var config = {};

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = configArr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var option = _step.value;

            config[option] = true;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    var _config$allowOverride = config.allowOverride;
    var allowOverride = _config$allowOverride === undefined ? false : _config$allowOverride;
    var _config$disallowSameImport = config.disallowSameImport;
    var disallowSameImport = _config$disallowSameImport === undefined ? false : _config$disallowSameImport;
    var _config$checkIfUsed = config.checkIfUsed;
    var checkIfUsed = _config$checkIfUsed === undefined ? false : _config$checkIfUsed;

    var imports = [];

    Object.keys(modules).forEach(function (inputName) {
        var dontCheckUsage = false;
        var isCustomPackage = false;
        var path = modules[inputName];
        var modifier = path[0];

        switch (modifier) {
            case '>':
                dontCheckUsage = true;
                path = path.slice(1);
                break;
            case '<':
                isCustomPackage = true;
                path = path.slice(1);
                break;
            default:
        }

        var destructRegex = /\{\s*([a-zA-Z]+)\s*}/;
        var isDestructingVar = destructRegex.test(inputName);

        var var_name = isDestructingVar ? inputName.match(destructRegex).pop() : inputName;

        if (path === true) {
            path = var_name;
        }

        var resultingStr = 'import ' + inputName + ' from \'' + path + '\';';

        var valid = true;

        if (valid && !allowOverride) {
            valid = !new RegExp(['(import\\s+' + var_name + ')', '(import\\s+{\\s*' + var_name + '\\s*})', '((var|let|const|function)+\\s+' + var_name + '\\b)'].join('|')).test(content);

            !valid && !isCustomPackage && _this.emitWarning('"' + var_name + '" variable is already used. Import won\'t be added.');
        }

        if (valid && disallowSameImport) {
            valid = !new RegExp('import.+from\\s+("|\')' + path + '("|\');*').test(content);

            !valid && _this.emitWarning('"' + path + '" path is already used. Import won\'t be added.');
        }

        if (valid && checkIfUsed && !dontCheckUsage) {
            if (var_name[0] !== '$') {
                valid = new RegExp('\\b' + var_name + '\\b').test(content);
            } else {
                if (var_name === '$') {
                    valid = /\$((\.)|(\())/.test(content);
                } else {
                    valid = new RegExp('\\' + var_name + '\\b').test(content);
                }
            }
        }

        if (valid) {
            imports.push(resultingStr);
        }
    });

    return imports.join('\n') + '\n\n' + content;
};

;
module.exports = exports['default'];